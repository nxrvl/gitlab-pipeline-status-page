package templates

import (
    "strconv"
)

// PathNode is a local representation to avoid circular dependencies
type PathNode struct {
    Name      string
    Path      string
    FullPath  string
    IsProject bool
    ProjectID int
    ProjectName string
    ProjectPath string
    Children  map[string]*PathNode
    Level     int
    Expanded  bool
    Selected  bool
}

// Helper functions to avoid circular dependencies
func countProjects(node *PathNode) int {
    count := 0

    // If this is a project, count it
    if node.IsProject {
        return 1
    }

    // Count all projects in child nodes
    for _, child := range node.Children {
        count += countProjects(child)
    }

    return count
}

// Helper function to get sorted keys
func getSortedChildKeys(node *PathNode) []string {
    keys := make([]string, 0, len(node.Children))
    for k := range node.Children {
        keys = append(keys, k)
    }

    // Simple bubble sort for sorting keys
    for i := 0; i < len(keys)-1; i++ {
        for j := 0; j < len(keys)-i-1; j++ {
            if keys[j] > keys[j+1] {
                keys[j], keys[j+1] = keys[j+1], keys[j]
            }
        }
    }

    return keys
}

// Helper to generate path indicators
func buildPathIndicator(level int) string {
    if level <= 1 {
        return ""
    }

    indicator := ""
    for i := 1; i < level; i++ {
        indicator += "│ "
    }

    // Replace last characters with a connector
    if len(indicator) >= 2 {
        indicator = indicator[:len(indicator)-2] + "├─"
    }

    return indicator
}

templ RenderPathTree(root *PathNode) {
    @renderPathNode(root)
}

templ renderPathNode(node *PathNode) {
    if node.Level > 0 {
        if node.IsProject {
            <!-- Project node -->
            <label class="list-group-item indented-item"
                   style={ "padding-left: " + strconv.Itoa(node.Level*20) + "px" }>
                <input class="form-check-input me-2"
                       type="checkbox"
                       name="projects"
                       value={ strconv.Itoa(node.ProjectID) }
                       checked?={ node.Selected }/>
                <small class="text-muted me-1">{ buildPathIndicator(node.Level) }</small>
                <strong>{ node.Name }</strong>
                <div class="text-muted small">{ node.ProjectPath }</div>
            </label>
        } else {
            <!-- Directory/group node -->
            <div class="group-item">
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center indented-item"
                     style={ "padding-left: " + strconv.Itoa(node.Level*20) + "px" }>
                    <div class="d-flex align-items-center">
                        <!-- Group selection checkbox with HTMX -->
                        <div class="form-check me-2">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id={ "group-" + node.FullPath }
                                   checked?={ node.Selected }
                                   hx-get={ "/render-path-tree?action=select&path=" + node.FullPath + "&select=" + strconv.FormatBool(!node.Selected) }
                                   hx-target="#group-tree-container"/>
                        </div>

                        <!-- Expand/collapse control -->
                        if len(node.Children) > 0 {
                            if node.Expanded {
                                <a href="#"
                                   class="text-decoration-none me-2"
                                   hx-get={ "/render-path-tree?action=collapse&path=" + node.FullPath }
                                   hx-target="#group-tree-container">
                                    <i class="bi bi-dash-square"></i>
                                </a>
                            } else {
                                <a href="#"
                                   class="text-decoration-none me-2"
                                   hx-get={ "/render-path-tree?action=expand&path=" + node.FullPath }
                                   hx-target="#group-tree-container">
                                    <i class="bi bi-plus-square"></i>
                                </a>
                            }
                        } else {
                            <i class="bi bi-folder me-2 text-muted"></i>
                        }
                        <small class="text-muted me-1">{ buildPathIndicator(node.Level) }</small>
                        <strong>{ node.Name }</strong>
                        <span class="text-muted ms-2">({ node.FullPath })</span>
                    </div>
                    <span class="badge bg-primary rounded-pill">
                        { strconv.Itoa(countProjects(node)) } project
                        if countProjects(node) != 1 {
                            s
                        }
                    </span>
                </div>

                <!-- Only render children if expanded - controlled by the server -->
                if node.Expanded {
                    <!-- Render children recursively (alphabetically sorted) -->
                    for _, key := range getSortedChildKeys(node) {
                        @renderPathNode(node.Children[key])
                    }
                }
            </div>
        }
    } else {
        <!-- Root node - only render children (alphabetically sorted) -->
        for _, key := range getSortedChildKeys(node) {
            @renderPathNode(node.Children[key])
        }
    }
}